@page "/"
@using System.Diagnostics;

<PageTitle>Index</PageTitle>

@{
    Log($"Component Rendered.");
}

<h1>The OnAfterRender Myth</h1>

<div class="bg-dark text-white mt-5 m-2 p-2">
    <pre>@_state</pre>
</div>

@code {
    private string? _state = "New";
    private Guid _componentUid = Guid.NewGuid();

    protected override async Task OnInitializedAsync()
    {
        Log($"OnInitializedAsync Started.");

        _state = "Loading";

        Log($"OnInitializedAsync DataLoad Started.");

        //await TaskYieldAsync();
        await TaskDelayAsync();

        _state = "Loaded";

        Log($"OnInitializedAsync Completed.");
    }

    protected override void OnInitialized()
        => Log($"OnInitialized Completed.");

    protected override void OnParametersSet()
        => Log($"OnParametersSet Completed.");

    protected override Task OnParametersSetAsync()
    {
        Log($"OnParametersSetAsync Completed.");
        return Task.CompletedTask;
    }

    protected override bool ShouldRender()
    {
        Log($"ShouldRender");
        return true;
    }

    private void TaskSync()
    => Thread.Sleep(1000);

    private async Task TaskYieldAsync()
        => await Task.Yield();

    private async Task TaskDelayAsync()
    => await Task.Delay(1);

    protected override void OnAfterRender(bool firstRender)
    {
        if (firstRender)
            Log($"First OnAfterRender Completed.");
        else
            Log($"Subsequent OnAfterRender Completed.");
    }

    protected override Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
            Log($"First OnAfterRenderAsync Completed.");
        else
            Log($"Subsequent OnAfterRenderAsync Completed.");

        return Task.CompletedTask;
    }

    private void Log(string message)
    {
        Console.WriteLine($"Thread: {Thread.CurrentThread.ManagedThreadId} - {message} on Component {_componentUid}.");
        Debug.WriteLine($"Thread: {Thread.CurrentThread.ManagedThreadId} - {message} on Component {_componentUid}.");
    }
}
